name: CI Suite
on:
  push:
    branches:
    - master
    - 'project/**'
    - 'gh-readonly-queue/master/**'
    - 'gh-readonly-queue/project/**'
  pull_request:
    branches:
    - master
    - 'project/**'
  merge_group:
    branches:
    - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  start_gate:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Start Gate
    runs-on: ubuntu-latest
    steps:
      - name: Mandatory Empty Step
        run: exit 0

  run_linters:
    name: Run Linters
    needs: start_gate
    runs-on: ubuntu-24.04
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      - name: Restore SpacemanDMM cache
        uses: actions/cache@v4
        with:
          path: ~/SpacemanDMM
          key: ${{ runner.os }}-spacemandmm-${{ hashFiles('dependencies.sh') }}
          restore-keys: |
            ${{ runner.os }}-spacemandmm-
      - name: Restore Yarn cache
        uses: actions/cache@v4
        with:
          path: tgui/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('tgui/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Restore Node cache
        uses: actions/cache@v4
        with:
          path: ~/.nvm
          key: ${{ runner.os }}-node-${{ hashFiles('dependencies.sh') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Restore Bootstrap cache
        uses: actions/cache@v4
        with:
          path: tools/bootstrap/.cache
          key: ${{ runner.os }}-bootstrap-${{ hashFiles('tools/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-bootstrap-
      - name: Restore Rust cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-rust-${{ hashFiles('tools/ci/ci_dependencies.sh')}}
          restore-keys: |
            ${{ runner.os }}-rust-
      - name: Install Tools
        run: |
          bash tools/ci/install_node.sh
          bash tools/ci/install/install_spaceman_dmm.sh dreamchecker
          bash tools/ci/install_ripgrep.sh
          sudo apt install -y python3-pip
          tools/bootstrap/python -c ''
      - name: Give Linters A Go
        id: linter-setup
        run: ':'
      - name: Run Grep Checks
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: bash tools/ci/check_grep.sh
      - name: Run DreamChecker
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        shell: bash
        run: ~/dreamchecker 2>&1 | bash tools/ci/annotate_dm.sh
      - name: Run Map Checks
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: |
          tools/bootstrap/python -m mapmerge2.dmm_test
      - name: Run DMI Tests
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: tools/bootstrap/python -m dmi.test
      - name: Check File Directories
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: bash tools/ci/check_filedirs.sh citadel.dme
      - name: Check Changelogs
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: bash tools/ci/check_changelogs.sh
      - name: Check Miscellaneous Files
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: bash tools/ci/check_misc.sh
      - name: Run TGUI Checks
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: tools/build/build --ci lint tgui-test

  compile_all_maps:
    name: Compile Maps
    needs: start_gate
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      - name: Restore BYOND cache
        uses: actions/cache@v4
        with:
          path: ~/BYOND
          key: ${{ runner.os }}-byond-${{ hashFiles('dependencies.sh') }}
      - name: Compile "All" Maps
        run: |
          bash tools/ci/install/install_byond.sh
          source $HOME/BYOND/byond/bin/byondsetup
          tools/build/build --ci dm -DCIBUILDING -DCITESTING -DALL_MAPS

  run_integration_tests:
    name: Integration Tests
    needs: start_gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v4
      - name: Restore Flyway
        uses: actions/cache@v4
        with:
          path: ~/flyway
          key: ${{ runner.os }}-flyway-${{ hashFiles('dependencies.sh') }}
      - name: Restore BYOND cache
        uses: actions/cache@v4
        with:
          path: ~/BYOND
          key: ${{ runner.os }}-byond-${{ hashFiles('dependencies.sh') }}
      - name: Install flyway
        run: |
          bash tools/ci/install/install_flyway.sh
      - name: Setup database
        run: |
          sudo systemctl start mysql
          mysql -u root -proot -e 'CREATE DATABASE ss13;'
          source dependencies.sh
          ~/flyway/flyway-$FLYWAY_VERSION/flyway -user=root -password=root -url=jdbc:mariadb://localhost:3306/ss13 -locations="filesystem:sql/migrations" migrate
      - name: Install rust-g
        run: |
          bash tools/ci/install/install_rust_g.sh
      - name: Compile Tests
        id: compile_tests
        run: |
          bash tools/ci/install/install_byond.sh
          source $HOME/BYOND/byond/bin/byondsetup
          tools/build/build --ci dm -DCIBUILDING -DANSICOLORS -Werror -ITG0001 -I"loop_checks"
      - name: Run Tests
        run: |
          source $HOME/BYOND/byond/bin/byondsetup
          bash tools/ci/run_server.sh

  test_windows:
    name: Windows Build
    needs: start_gate
    runs-on: windows-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
      - name: Restore Yarn cache
        uses: actions/cache@v4
        with:
          path: tgui/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('tgui/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Compile
        run: pwsh tools/ci/build.ps1
        env:
          DM_EXE: "C:\\byond\\bin\\dm.exe"

  completion_gate: # Serves as a non-moving target for branch rulesets
    if: always() && !cancelled()
    name: Completion Gate
    needs: [ test_windows, run_integration_tests, compile_all_maps, run_linters ]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
