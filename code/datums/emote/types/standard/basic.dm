//* This file is explicitly licensed under the MIT license. *//
//* Copyright (c) 2024 Citadel Station Developers           *//

/**
 * Basic emotes that just emit a simple message or something.
 *
 * * This is in reality just a generic emote subtype that handles most cases.
 * * 'arbitrary' will be a list of key-values, with EMOTE_PARAMETER_KEY_*.
 * * parameters are a list of strings; you can do strings with spaces with "string here". \" will escape doublequotes, \\ will escape a \
 * * named parameters are not yet supported. it's too expensive to process these.
 * * you are allowed one custom parameter in addition to default parameters generated by this type (like 'target').
 * * the custom parameter will be under EMOTE_PARAMETER_KEY_CUSTOM.
 */
/datum/emote/standard/basic
	abstract_type = /datum/emote/standard/basic

	//* Feedback *//

	/// outgoing saycode type flags
	///
	/// If set to AUTO, the following happens:
	/// * If the hearer can see, normal / visible text is used
	/// * If the hearer can't see an actor, 'someone / something' replaces that actor
	/// * If the hearer cannot see, audible is used with no replacement.
	///
	/// If set to anything that isn't AUTO, the following happens:
	/// * ALWAYS, LIVING, CONSCIOUS will always use visible string, never audible
	/// * VISIBLE will always use visible string, never audible
	/// * AUDIBLE will always use audible string, falling back to visible if it exists
	var/feedback_saycode_type = SAYCODE_TYPE_AUTO

	/**
	 * Override order as follows:
	 *
	 * 1. Miming, if miming
	 * 2. Muzzled, if muzzled
	 * 3. Targeted, if there is a target
	 * 4. Default
	 */

	/// if existing, and we're miming, we immediately switch saycode mode to visible if we're on auto
	///
	/// * %USER% is replaced with the user.
	/// * If the replacement is at the start of the string, it'll be capitalized as needed.
	/// * HTML is valid
	var/feedback_special_miming
	/// targeted version of miming
	///
	/// * %USER% is replaced with the user.
	/// * %TARGET% is replaced with a target.
	/// * If the replacement is at the start of the string, it'll be capitalized as needed.
	/// * HTML is valid
	var/feedback_special_miming_targeted

	/// if existing, and we're muzzled, we immediately switch to this
	///
	/// * %USER% is replaced with the user.
	/// * If the replacement is at the start of the string, it'll be capitalized as needed.
	/// * HTML is valid
	var/feedback_special_muzzled
	/// targeted version of muzzled
	///
	/// * %USER% is replaced with the user.
	/// * %TARGET% is replaced with a target.
	/// * If the replacement is at the start of the string, it'll be capitalized as needed.
	/// * HTML is valid
	var/feedback_special_miming_targeted
	/// audible descriptor for muzzled
	///
	/// * HTML is valid
	var/feedback_special_muzzled_audible

	/// the default feedback string
	///
	/// * If heard, audible has %USER% replaced with "someone" if the viewer is blind.
	/// * If the replacement is at the start of the string, it'll be capitalized as needed.
	/// * HTML is valid
	var/feedback_default = "%USER% does something that isn't implemented by the coders. (Yell at coders, someone forgot a default string.)"
	/// the default targeted feedback sting
	///
	/// * %USER% is replaced with the user.
	/// * %TARGET% is replaced with a target.
	/// * If the replacement is at the start of the string, it'll be capitalized as needed.
	/// * HTML is valid
	var/feedback_default_targeted
	/// the default audible descriptor
	///
	/// * HTML is valid
	var/feedback_default_audible = "You hear something that isn't implemented by the coders. (Yell at coders, someone forgot a default string.)"

	//* Parameter *//

	/// has a custom parameter
	///
	/// * if enabled, it goes *before* target
	/// * this means that it must be specified to specify a target at all
	var/parameter_custom = FALSE
	/// your custom parameter help string
	var/parameter_custom_description

	//* Targeting *//

	/// Allows targeting?
	var/target_allowed = FALSE
	/// requires a target?
	var/target_required = FALSE
	/// maximum distance target can be from us
	var/target_range = 7

/datum/emote/standard/basic/New()
	if(isnull(parameter_description))
		parameter_description = generate_parameter_description()
	else
		stack_trace("[NAMEOF(src, parameter_description)] was set, but it should be autogenerated!")
	..()

/datum/emote/standard/basic/proc/generate_parameter_description()
	#warn impl

/datum/emote/standard/basic/process_parameters(datum/event_args/actor/actor, parameter_string)
	#warn impl

/datum/emote/standard/basic/try_run_emote(datum/event_args/actor/actor, list/arbitrary)
	. = ..()
	#warn impl

/datum/emote/standard/basic/run_emote(datum/event_args/actor/actor, list/arbitrary)
	. = ..()
	#warn impl

/**
 * Processes a custom parameter
 */
/datum/emote/standard/basic/proc/process_custom_parameter(datum/event_args/actor/actor, string)
	// default to just spitting the string back out
	return string

#warn impl


