/**
 * pictures
 *
 * pictures are no longer kept in memory
 * instead they're written to a special data directory,
 * saved as .png and a .json.
 *
 * a (not recommended) fallback mode does exist for servers
 * without web services. persistence will be entirely disabled in that case.
 *
 * !NOTICE!
 *   This may seem somewhat counterintuitive but the procs to make new pictures are in SSpersistence
 *   Go to [code/controllers/subsystem/persistence/pictures.dm].
 */
/datum/picture
	//!# Data
	/// our hash
	var/our_hash
	/// asset hash
	var/asset_hash
	/// flags
	var/picture_flags = NONE
	/// asset - the data that comprises of this picture
	var/asset
	/// the type of asset we hold. freshly deserialized probably have a path, freshly captured proabbly have an icon
	var/asset_type
	/// thumbnail icon - cached
	var/icon/thumbnail
	/// size in pixels
	var/size_x
	/// size in pixels
	var/size_y

	//!# Metadata
	/// name - by user
	var/metadata_name
	/// desc - by user, used as caption
	var/metadata_caption
	/// autogenerated mob descriptions/poses
	var/metadata_text_description
	/// stamps, if any
	var/list/metadata_stamps
	/// scribbled on the back...
	var/metadata_scribbles

/**
 * requests we load our actual icon into memory
 *
 * returns FALSE if we can't
 */
/datum/picture/proc/load_into_memory(timeout = 1 MINUTES)
	#warn impl

/**
 * requests we unload out of memory
 *
 * returns FALSE if we can't
 */
/datum/picture/proc/unload()

/**
 * save changes
 */
/datum/picture/proc/flush()
	return SSpersistence.save_picture(src)

/**
 * kinda like icon2html
 * sends us to a list of people
 *
 * returns a usable url
 */
/datum/picture/proc/send_asset(list/users)
	#warn impl
