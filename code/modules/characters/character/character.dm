//* This file is explicitly licensed under the MIT license. *//
//* Copyright (c) 2024 Citadel Station Developers           *//

/**
 * A character in the game.
 *
 * ## Fields
 *
 * ### System
 *
 * System fields are prefixed with `s_` and should never be touched or changed
 * by user code without invoking helpers.
 *
 * * Anything that can potentially be filtered on by the DB will go in here.
 * * Generally, there's no reason to touch system fields for gameplay; in some cases like employee
 * ID reassignment, however, it can happen.
 *
 * ### Base
 *
 * Base fields are prefixed with `b_`.
 *
 * These determine a lot of things about the character. They generally cannot
 * be edited 'directly' by the user (e.g. requires character creator popup), but the game's
 * code can edit it.
 *
 * Make sure you absolutely know what you are doing if you do.
 *
 * ### Character
 *
 * Character fields are prefixed with `c_`, and should **only** be editable by the player,
 * not any persistent systems.
 *
 * ### Persistent
 *
 * Persistent fields are prefixed with `p_` and are editable by the game at will, freely.
 *
 * ## Resultant Computation
 *
 * Characters are the results of all their overlays and settings being flattened to a
 * /datum/character_result. This can be done partially just for rendering purposes, too.
 *
 * Generally, this is what happens. The actual order might differ; as an example,
 * appearance is applied after physiology most of the time and physiology denies
 * setting incompatible appearance rather than changing the resultant appearance.
 *
 * 1. Apply [Species --> faction --> background]
 * 2. Apply character_appearance
 * 3. Apply character_physiology [organs --> ...misc]
 * 4. Apply characteristics / skills / talents / traits
 * 5. Apply ...misc
 *
 * Lower layers override higher layers. Each layer can have overlays; as an example,
 * appearance has overlays the user can define and physiology has a persistent overlay.
 * Overlays override what they're overlaid on if they conflict.
 *
 * ## Notes
 * * Ckey is intentionally not stored; characters don't belong to anyone,
 *   the backend determines who can access what (thus establishing ownership).
 */
/datum/character
	//*                             System                          *//
	//* -- Everything in here is handled by save / load backend. -- *//

	/// character ID in the table
	///
	/// * for savefile / legacy characters, this will **not be set.**
	/// * if this is null, no persistence can proceed as we are operating in legacy / savefile mode.
	var/s_character_id
	/// ISO 8601 timestamp of first creation
	var/s_created_time
	/// Filter string. This is used to do things like filtering out the characters
	/// that are actually relevant for a role.
	/// * ADMINS, DO NOT TOUCH THIS FOR THE LOVE OF GOD
	var/s_filter_string
	/// Current migrations applied, as a list.
	/// * ADMINS, DO NOT TOUCH THIS FOR THE LOVE OF GOD
	var/list/s_migrations_performed
	/// IC fluff ID. This is a system value because it's directly serialized to DB,
	/// and can be used for filtering. It should not be modified without using
	/// helper procs.
	var/s_employee_id
	/// Dirty / was modified
	var/s_dirty = FALSE
	/// Our label for the UI
	/// * The player can modify this.
	var/s_label_string

	//*             Character             *//

	/// Character status struct. This is a hybrid field, and is often used in persistence.
	var/datum/character_status/b_status
	/// Faction
	/// * Serialized as ID
	/// * Determines base role eligibility, as well as what species you can choose.
	/// * Requires character creator wizard to alter; not always freely alterable.
	/// * Factions may enable background slots. They should never collide with a species slot.
	//  TODO: actual faction datum + impl
	var/datum/prototype/b_faction
	/// Species
	/// * Serialized as ID
	/// * Determines the base attributes of this character.
	/// * Requires character creator wizard to alter; not always freely alterable.
	/// * A species may enable background slots. They should never collide with a faction slot.
	//  TODO: actual species datum + impl
	var/datum/prototype/b_species
	/// Dynamic background slots by key
	/// * Serialized as ID
	/// * Can alter base attributes of this character
	/// * Requires character creator wizard to alter; not always freely alterable.
	/// * This is the key on the species / faction associated to the background.
	//  TODO: actual backgroud datums + impl
	var/list/b_background_by_key

	/// Main appearance
	var/datum/character_appearance/c_appearance
	/// Keyed appearance overlays
	/// * Keys are auto-generated by the system, and should not change
	var/list/c_keyed_appearance_overlays

	/// Keyed loadout slots
	/// * Keys are auto-generated by the system, and should not change
	var/list/c_keyed_loadouts

	/// Persistent inventory
	var/datum/character_inventory/p_inventory

	/// Character's physiology, as picked by players.
	var/datum/character_physiology/c_physiology
	/// Character's physiology, as persisting.
	var/datum/character_physiology/p_physiology

	// TODO: arbitrary data / entry system
	// TODO: OOC notes on data / entry system

	// TODO: records (?)
	// TODO: personal notes (?)
	// TODO: admin notes (?)
	// TODO: occupation / roles (?)
	// TODO: characteristics + traits (?)

#warn impl

//* Instantiation *//

/**
 * Lazy proc to make the character.
 */
/datum/character/proc/instantiate_character()
	var/datum/character_result/computed = compute_resultant_character()
	#warn impl

//* Resultant Computation *//

/**\
 * Create character result struct, used to instantiate a character.
 */
/datum/character/proc/compute_resultant_character() as /datum/character_result
	var/datum/character_result/result = new
	result = compute_resultant_physiology()
	result = compute_resultant_appearance()
	#warn impl
	return result

/datum/character/proc/compute_resultant_appearance() as /datum/character_appearance
	#warn impl

/datum/character/proc/compute_resultant_physiology() as /datum/character_physiology
	#warn impl

/datum/character/proc/
	#warn impl

/datum/character/proc/
	#warn impl

/datum/character/proc/
	#warn impl
